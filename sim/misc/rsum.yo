                            | 
                            | # 这里是根据书上的P252 图4-7写出来的
                            | # 首先在地址 0x0 开始
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp  # 初始化栈指针
0x00a: 804800000000000000   |     call main           # 执行主函数
0x013: 00                   |     halt
                            | 
0x018:                      |     .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
                            | # 开始主函数
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ele1, %rdi   # 把链表头传入参数中
0x052: 805c00000000000000   |     call rsum_list
0x05b: 90                   |     ret
                            | 
                            | # 开始rsum_list函数
0x05c:                      | rsum_list:
0x05c: a03f                 |     pushq %rbx          # 当前的结果保存在%rbx中
0x05e: 6300                 |     xorq %rax, %rax     # 我们让寄存器%rax保存sum，且让他初始等于0
0x060: 6277                 |     andq %rdi, %rdi     # 设置条件码
0x062: 738c00000000000000   |     je l1               # 如果当前的参数是空指针的话，就返回了
0x06b: 50370000000000000000 |     mrmovq (%rdi), %rbx # %rbx = node->val
0x075: 50a70800000000000000 |     mrmovq 8(%rdi), %r10
0x07f: 20a7                 |     rrmovq %r10, %rdi
0x081: 805c00000000000000   |     call rsum_list
0x08a: 6030                 |     addq %rbx, %rax
0x08c:                      | l1:
0x08c: b03f                 |     popq %rbx
0x08e: 90                   |     ret
                            | 
0x200:                      |     .pos 0x200
0x200:                      | stack:
