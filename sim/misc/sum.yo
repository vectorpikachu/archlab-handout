                            | # 这里是根据书上的P252 图4-7写出来的
                            | # 首先在地址 0x0 开始
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp  # 初始化栈指针
0x00a: 804800000000000000   |     call main           # 执行主函数
0x013: 00                   |     halt
                            | 
0x018:                      |     .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
                            | # 开始主函数
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ele1, %rdi   # 把链表头传入参数中
0x052: 805c00000000000000   |     call sum_list
0x05b: 90                   |     ret
                            | 
                            | # 开始sum_list函数
0x05c:                      | sum_list:
0x05c: 6300                 |     xorq %rax, %rax     # 我们让寄存器%rax保存sum，且让他初始等于0
0x05e: 6277                 |     andq %rdi, %rdi     # 设置条件码
0x060: 746a00000000000000   |     jne loop
0x069: 90                   |     ret
                            | 
                            | # 下面是要开始的一个循环
0x06a:                      | loop:
0x06a: 50a70000000000000000 |     mrmovq (%rdi), %r10 # 读出来val的值
0x074: 60a0                 |     addq %r10, %rax
0x076: 50670800000000000000 |     mrmovq 8(%rdi), %rsi # 下一个的地址
0x080: 2067                 |     rrmovq %rsi, %rdi
0x082: 6277                 |     andq %rdi, %rdi
0x084: 746a00000000000000   |     jne loop
0x08d: 90                   |     ret
                            | 
0x200:                      |     .pos 0x200
0x200:                      | stack:
