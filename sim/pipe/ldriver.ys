#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
# 吕杭州 2200013126
# 都换成iaddq指令后
# 我么要进行循环展开，我们展开8次，就是每次取8个数，然后进行判断，如果是正数就加1，然后再进行下一次循环
# 事实上应该mrmovq和rmmovq相邻的话会带来一些性能的损失
# 就是每次循环处理8个元素
# 这样之后在每个循环处理4个元素

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	# xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	jmp check12
	# jmp check8		# 如果len大于0，那么就进行循环展开

check12:
	iaddq $-1, %rdx
	je Loop
	iaddq $1, %rdx
	iaddq $-2, %rdx
	je Loop2
	iaddq $2, %rdx
	iaddq $-3, %rdx
	je Loop3
	iaddq $3, %rdx
	jmp check8

Loop8:
# 这样避开了mrmovq和rmmovq相邻的问题
	mrmovq (%rdi), %rbx
	mrmovq 8(%rdi), %rcx
	mrmovq 16(%rdi), %r8
	mrmovq 24(%rdi), %r9
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r11
	mrmovq 48(%rdi), %r12
	mrmovq 56(%rdi), %r13
	
	rmmovq %rbx, (%rsi)
	rmmovq %rcx, 8(%rsi)
	rmmovq %r8, 16(%rsi)
	rmmovq %r9, 24(%rsi)
	rmmovq %r10, 32(%rsi)
	rmmovq %r11, 40(%rsi)
	rmmovq %r12, 48(%rsi)
	rmmovq %r13, 56(%rsi)
# 这里都是在判断我们是否可以让count++
test1:
	andq %rbx, %rbx
	jle test2
	iaddq $1, %rax
test2:
	andq %rcx, %rcx
	jle test3
	iaddq $1, %rax
test3:
	andq %r8, %r8
	jle test4
	iaddq $1, %rax
test4:
	andq %r9, %r9
	jle test5
	iaddq $1, %rax
test5:
	andq %r10, %r10
	jle test6
	iaddq $1, %rax
test6:
	andq %r11, %r11
	jle test7
	iaddq $1, %rax
test7:
	andq %r12, %r12
	jle test8
	iaddq $1, %rax
test8:
	andq %r13, %r13
	jle increment8	# 如果这8个数检查过了，那么就进行下一次循环
	iaddq $1, %rax
increment8:
	iaddq $64, %rdi
	iaddq $64, %rsi
check8:
	iaddq $-8, %rdx
	jge Loop8
	iaddq $8, %rdx 		# 但是减去8之后，长度比0小，说明剩下的不足8个，要进行单个的循环
	andq %rdx, %rdx
	jle Done				# 如果长度为0，那么就直接返回
	jmp check4
# 然后我们可以展开为4 2 1
Loop4:
	mrmovq (%rdi), %rbx
	mrmovq 8(%rdi), %rcx
	mrmovq 16(%rdi), %r8
	mrmovq 24(%rdi), %r9
	
	rmmovq %rbx, (%rsi)
	rmmovq %rcx, 8(%rsi)
	rmmovq %r8, 16(%rsi)
	rmmovq %r9, 24(%rsi)

test1_4:
	andq %rbx, %rbx
	jle test2_4
	iaddq $1, %rax
test2_4:
	andq %rcx, %rcx
	jle test3_4
	iaddq $1, %rax
test3_4:
	andq %r8, %r8
	jle test4_4
	iaddq $1, %rax
test4_4:
	andq %r9, %r9
	jle increment4
	iaddq $1, %rax
increment4:
	iaddq $32, %rdi
	iaddq $32, %rsi
check4:
	iaddq $-4, %rdx
	jge Loop4
	iaddq $4, %rdx
	andq %rdx, %rdx
	jle Done
	jmp check3

Loop3:
	mrmovq (%rdi), %rbx
	mrmovq 8(%rdi), %rcx
	mrmovq 16(%rdi), %r8
	
	rmmovq %rbx, (%rsi)
	rmmovq %rcx, 8(%rsi)
	rmmovq %r8, 16(%rsi)
test3_1:
	andq %rbx, %rbx
	jle test3_2
	iaddq $1, %rax
test3_2:
	andq %rcx, %rcx
	jle test3_3
	iaddq $1, %rax
test3_3:
	andq %r8, %r8
	jle increment3
	iaddq $1, %rax
increment3:
	iaddq $24, %rdi
	iaddq $24, %rsi
check3:
	iaddq $-3, %rdx
	jge Loop3
	iaddq $3, %rdx
	andq %rdx, %rdx
	jle Done
	jmp check2

Loop2:
	mrmovq (%rdi), %rbx
	mrmovq 8(%rdi), %rcx
	
	rmmovq %rbx, (%rsi)
	rmmovq %rcx, 8(%rsi)

test1_2:
	andq %rbx, %rbx
	jle test2_2
	iaddq $1, %rax
test2_2:
	andq %rcx, %rcx
	jle increment2
	iaddq $1, %rax
increment2:
	iaddq $16, %rdi
	iaddq $16, %rsi
check2:
	iaddq $-2, %rdx
	jge Loop2
	iaddq $2, %rdx
	andq %rdx, %rdx
	jle Done

Loop:	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	# irmovq $1, %r10
	# addq %r10, %rax		# count++
	iaddq $1, %rax		# count++, !modified the baseline code
Npos:	
	
	# irmovq $1, %r10
	# subq %r10, %rdx		# len--
	iaddq $8, %rdi		# src++, !modified the baseline code
	iaddq $8, %rsi		# dst++, !modified the baseline code
	# irmovq $8, %r10
	# addq %r10, %rdi		# src++
	# addq %r10, %rsi		# dst++
	iaddq $-1, %rdx		# len--, !modified the baseline code
	# andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your  function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad -6
	.quad 7
	.quad 8
	.quad -9
	.quad -10
	.quad 11
	.quad 12
	.quad -13
	.quad 14
	.quad -15
	.quad 16
	.quad 17
	.quad -18
	.quad -19
	.quad 20
	.quad 21
	.quad -22
	.quad -23
	.quad 24
	.quad 25
	.quad 26
	.quad -27
	.quad -28
	.quad -29
	.quad 30
	.quad -31
	.quad -32
	.quad 33
	.quad -34
	.quad -35
	.quad -36
	.quad 37
	.quad -38
	.quad 39
	.quad -40
	.quad 41
	.quad 42
	.quad 43
	.quad 44
	.quad -45
	.quad -46
	.quad -47
	.quad -48
	.quad -49
	.quad 50
	.quad -51
	.quad -52
	.quad -53
	.quad -54
	.quad 55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
